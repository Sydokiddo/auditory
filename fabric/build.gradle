import groovy.json.JsonOutput
import groovy.json.JsonSlurper

plugins {
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

archivesBaseName = "${rootProject.archivesBaseName}-${project.name}"

architectury {
    platformSetupLoomIde()
    fabric()
}

def generatedResources = file("src/generated/resources")
def accessWidenerFile = project(":common").file("src/main/resources/${rootProject.mod_id}.accesswidener")

loom {
    mixin {
        defaultRefmapName = "${project.mod_id}-refmap.json"
    }
    accessWidenerPath.set(accessWidenerFile)

    runs {
        datagen {
            server()

            name "Minecraft Data"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${generatedResources}"

            runDir "build/datagen"
        }
    }
}

sourceSets.main.resources {
    srcDir generatedResources
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    maven { url "https://maven.terraformersmc.com/" }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    modApi("gg.moonflower:pollen-fabric:${rootProject.pollen_version}")
    modApi "com.terraformersmc:modmenu:${rootProject.mod_menu_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

task copyAccessWidener(type: Copy) {
    from(accessWidenerFile)
    into(generatedResources)
}

processResources {
    dependsOn(copyAccessWidener)
    inputs.property "id", rootProject.mod_id
    inputs.property "name", rootProject.mod_name
    inputs.property "version", rootProject.mod_version
    inputs.property "repo", rootProject.name

    filesMatching("fabric.mod.json") {
        expand "id": rootProject.mod_id,
                "name": rootProject.mod_name,
                "version": rootProject.mod_version,
                "repo": rootProject.name
    }

    doLast {
        fileTree(dir: outputs.files.asPath, include: "**/*.json").each {
            File file -> file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
        }
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = project.archivesBaseName
            from components.java
        }
    }
}